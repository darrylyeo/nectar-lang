WHITESPACE = _{ (" " | "\n" | "\t" | "\r" | NEWLINE)+ }
alpha = @{ 'a'..'z' | 'A'..'Z' }
digit = @{ '0'..'9' }

identifier = @{ alpha ~ (alpha | digit | "_" | "-")* }

string_content = { (!PEEK ~ ANY)* }
string = { (PUSH("\""+) | PUSH("'"+)) ~ string_content ~ POP }

integer = @{ digit+ }
decimal = @{ digit* ~ "." ~ digit+ }
number = @{ ("+" | "-")? ~ (decimal | integer) ~ (^"e" ~ integer)? }

unit = { non_keyword ~ ("/" ~ non_keyword)* }
quantity = { number ~ unit }

article = _{ ^"an" | ^"a" | ^"the" | ^"another" }
and = _{ ^"and" }
or = _{ ^"or" }
is = _{ (^"is" | ^"are" ~ ^"all"? | ^"can be" | ^"am") }
has = _{ ^"has" | ^"have" }
does = _{ ^"does" | ^"do" }
of = _{ ^"of" }
with = _{ ^"with" }
aka = _{ ^"aka" | ^"alias" | (^"also" | ^"better" | ^"commonly" | ^"otherwise" | ^"widely")? ~ (^"called" | ^"known as" | ^"named" | ^"titled" | ^"goes by" | ^"nicknamed" | ^"referred to as") | or }
category_keyword = _{ ^"category" | ^"type" }

keyword = _{ article | and | or | is | has | does | of | with | aka | category_keyword }
non_keyword = _{ !(keyword) ~ identifier }


value = { ^"value" | ^"quantity" }
than = { ^"than" | (^"as" | ^"when") ~ (^"compared" | ^"relative") ~ (^"next"? ~ ^"to" | ^"against") }

equal_to = { ^"=" | of? ~ (^"equal" | ^"equals" | ^"equivalent") ~ value? ~ ^"to" | article? ~ ^"same" ~ "as" }
less_than = { ^"<" | of? ~ ^"even"? ~ (^"less" ~ ^"numerous"? | ^"lesser" | ^"smaller" | ^"lower" | ^"shorter" | ^"shallower" | ^"closer" | ^"lighter" | ^"weaker" | ^"thinner" | ^"skinnier" | ^"narrower" | ^"colder" | ^"cooler" | ^"worse" | ^"worser") ~ (^"in" ~ value)? ~ than }
greater_than = { of? ~ ^"even"? ~ (^"more" ~ ^"numerous"? | ^"greater" | ^"bigger" | ^"higher" | ^"taller" | ^"longer" | ^"deeper" | ^"farther" | ^"further" | ^"heavier" | ^"stronger" | ^"thicker" | ^"wider" | ^"hotter" | ^"warmer" | ^"better") ~ (^"in" ~ value)? ~ than }
less_than_or_equal_to = { ^"≤" | ^"<=" | less_than ~ or ~ equal_to }
greater_than_or_equal_to = { ^"≥" | ^">=" | greater_than ~ or ~ equal_to }

comparator = { equal_to | less_than_or_equal_to | greater_than_or_equal_to | less_than | greater_than }
comparator_disjunction = _{ comparator ~ (("," ~ comparator)* ~ (","? ~ or ~ comparator)+)? }


property = { identifier }
a_property = _{ article? ~ property }

property_expression = { a_property ~ of ~ a_noun | a_noun ~ a_property | string | quantity | number }
property_expression_disjunction = {
	(a_property ~ of) ~ noun_disjunction |
	property_expression ~ (("," ~ property_expression)* ~ (","? ~ or ~ property_expression)+)?
}
property_expression_conjunction = {
	(a_property ~ of) ~ noun_conjunction |
	property_expression ~ (("," ~ property_expression)* ~ (","? ~ and ~ property_expression)+)?
}
property_expression_junction = { property_expression_disjunction | property_expression_conjunction }


noun = @{"@" ~ identifier | "@" ~ string }
a_noun = _{ article? ~ noun }
noun_disjunction = { a_noun ~ (("," ~ a_noun)* ~ (","? ~ or ~ a_noun)+)? }
noun_conjunction = { a_noun ~ (("," ~ a_noun)* ~ (","? ~ and ~ a_noun)+)? }
noun_junction = { noun_disjunction | noun_conjunction }
noun_alias = _{
	"(" ~ aka? ~ noun_disjunction ~ ")" |
	","? ~ aka ~ noun_disjunction ~ ","?
}
noun_entity = {
	a_noun ~ ("/" ~ a_noun)+ |
	a_noun ~ noun_alias |
    a_noun
}
nouns = {
	noun_entity ~ (
		("," ~ noun_entity)* ~ (","? ~ and ~ noun_entity)+ |
		(";" ~ noun_entity)* ~ (";"? ~ and ~ noun_entity)+
	)?
}

category = @{ "#" ~ identifier }
a_category = _{ article? ~ category }
category_disjunction = { a_category ~ ("," ~ a_category)* ~ ((","? ~ or ~ a_category)+)? }
category_conjunction = { a_category ~ ("," ~ a_category)* ~ ((","? ~ and ~ a_category)+)? }
category_junction = { category_disjunction | category_conjunction }
category_alias = _{
	"(" ~ aka? ~ category_disjunction ~ ")" |
	","? ~ aka ~ category_disjunction ~ ","?
}
category_entity = {
	a_category ~ ("/" ~ a_category)+ |
	a_category ~ category_alias |
    a_category
}
categories = {
	category_entity ~ (
		category_entity |
		("," ~ category_entity)* ~ (","? ~ and ~ category_entity)+ |
		(";" ~ category_entity)* ~ (";"? ~ and ~ category_entity)+
	)?
}

relation = {
	^"represents" |
	^"says" |
	^"loves" |
	^"likes" |
//	(^"maps" | ^"reduces" | ^"transforms" | ^"translates" | ^"compiles" | ^"transpiles" | ^"adapts") ~ (^"into" | ^"to") |
//	(^"lives" | ^"works" | ^"plays" | ^"made") ~ (^"in" | ^"at" | ^"for" | ^"with") |
//	is? ~ article? ~ (
//		^"type" |
//		^"representation" |
//		^"element" |
//		^"subset" |
//		^"superset" |
//		^"leader" |
//		^"follower" |
//		^"member" |
//		^"species" |
//		^"citizen" |
//		^"friend" |
//		^"enemy" |
//		^"coworker" |
//		^"spouse" |
//		^"parent" |
//		^"sibling" |
//		^"child" |
//		^"contributor"
//	) ~ ^"of" |
//	is? ~ (
//		^"related" |
//		^"married"
//	) ~ ^"to" |
//	is? ~ (
//		^"friends" |
//		^"enemies" |
//		^"acquaintances" |
//		^"coworkers" |
//		^"married"
//	) ~ ^"with" |
//	is? ~ (
//		^"created" |
//		^"written" |
//		^"spoken" |
//		^"authored" |
//		^"filmed" |
//		^"produced" |
//		^"performed" |
//		^"played" |
//		^"designed" |
//		^"composed" |
//		^"represented" |
//		^"drafted" |
//		^"edited" |
//		^"published" |
//		^"made" |
//		^"invented" |
//		^"manufactured" |
//		^"distributed" |
//		^"sold" |
//		^"adapted"
//	) ~ (^"by" | ^"for" | ^"with") |
//	is? ~ (
//		^"affected" |
//		^"caused" |
//		^"adopted"
//	) ~ ^"by" |
//	is? ~ (
//		^"affected" |
//		^"caused" |
//		^"adopted"
//	) ~ ^"over" |
	is? ~ article? ~ identifier ~ (^"about" | ^"above" | ^"across" | ^"after" | ^"against" | ^"among" | ^"around" | ^"at" | ^"before" | ^"behind" | ^"below" | ^"beside" | ^"between" | ^"by" | ^"down" | ^"during" | ^"for" | ^"from" | ^"in" | ^"inside" | ^"into" | ^"near" | ^"of" | ^"off" | ^"on" | ^"out" | ^"over" | ^"through" | ^"to" | ^"toward" | ^"under" | ^"up" | ^"with")
}


aka_predicate = { is? ~ aka ~ noun_disjunction }
has_property_predicate = { (does? ~ has | with)? ~ (a_property ~ of? ~ property_expression | property_expression ~ property) }
categorization_predicate = { (is ~ (of? ~ article? ~ category_keyword)? | does? ~ has ~ article? ~ category_keyword ~ of?) ~ categories }
relation_predicate = { relation ~ nouns }
hyper_relation_predicate = { relation ~ categories }

predicate = {
	aka_predicate |
	has_property_predicate |
	categorization_predicate |
	relation_predicate |
	hyper_relation_predicate
}
predicates = { predicate ~ (","? ~ and? ~ predicate)* }


aka_query = {
	is ~ noun_junction ~ aka ~ noun_junction ~ "?"* |
	noun_junction ~ is? ~ aka ~ noun_junction ~ "?"+
}
property_comparison_query = {
	is ~ property_expression_junction ~ comparator_disjunction? ~ property_expression_junction ~ "?"* |
	property_expression_junction ~ is? ~ comparator_disjunction? ~ property_expression_junction ~ "?"+ |
	does ~ property_expression_junction ~ comparator_disjunction? ~ property_expression_junction ~ "?"* |
	property_expression_junction ~ does? ~ comparator_disjunction? ~ property_expression_junction ~ "?"+ |
	does? ~ noun_junction ~ has ~ a_property ~ comparator_disjunction? ~ property_expression_junction ~ "?"*
}
categorization_query = {
	is ~ noun_junction ~ (of? ~ article? ~ category_keyword)? ~ category_junction ~ "?"* |
	noun_junction ~ is? ~ (of? ~ article? ~ category_keyword)? ~ category_junction  ~ "?"+ |
	does ~ noun_junction ~ has ~ category_keyword ~ of? ~ category_junction ~ "?"* |
	noun_junction ~ does? ~ has ~ category_keyword ~ of? ~ category_junction ~ "?"+
}
relation_query = {
	is ~ noun_junction ~ relation ~ noun_junction ~ "?"* |
	noun_junction ~ relation ~ noun_junction ~ "?"+
}


declaration = { nouns ~ predicates? }
query = { aka_query | property_comparison_query | categorization_query | relation_query }

dimension_slice = { property_expression ~ "[" ~ statements ~ "]" ~ property_expression?  }
dimension = { predicate ~ "[" ~ dimension_slice* ~ "]" }

scope = { identifier ~ "{" ~ statements? ~ "}" }

statement = { (query ~ ("?" | "\n")?) | (declaration ~ ("." | "!"+ | "\n")?) | scope }
statements = { statement+ }